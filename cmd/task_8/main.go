// Установка бита в числе
//
// Дана переменная типа int64. Разработать программу, которая устанавливает i-й бит этого числа в 1 или 0.
//
// Пример: для числа 5 (0101₂) установка 1-го бита в 0 даст 4 (0100₂).
//
// Подсказка: используйте битовые операции (|, &^).
////////////////////////////////////////////////////////////////////////////////////////

package main

import (
	"errors"
	"fmt"
)

func setBit(n int64, i int, bitValue int) (int64, error) {
	if i < 0 || i >= 64 {
		return 0, errors.New("некорректный номер разряда. Номер разряда должен быть в диапазоне 1..64(а номер бита в диапазоне 0..63)")
	}

	mask := int64(1) << uint(i)

	if bitValue == 1 {
		return n | mask, nil // устанавливаем бит в 1
	}
	return n &^ mask, nil // устанавливаем бит в 0

}

func main() {

	var n int64 = 5      // 0101(2)
	var bitValue int = 0 // Значение для замены

	var i int = 1      // Номер разряда(начинаеются справа с 1-цы) - и кажется в постановке задачи здесть ошибка
	var bn int = i - 1 // Номер бита(начинаеются справа с 0-ля)

	result, err := setBit(n, bn, bitValue)
	if err != nil {
		fmt.Println("Ошибка:", err)
		return
	}

	fmt.Printf("Исходное число: %d (%04b)\n", n, n)
	fmt.Printf("После установки %d-го бита (%d-го разряда) в %d: %d (%04b)\n", bn, i, bitValue, result, result)

}
