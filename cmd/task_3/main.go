// Работа нескольких воркеров
//
// * Реализовать постоянную запись данных в канал (в главной горутине).
// * Реализовать набор из N воркеров, которые читают данные из этого канала и выводят их в stdout.
// * Программа должна принимать параметром количество воркеров и при старте создавать указанное
// число горутин-воркеров.
/////////////////////////////////////////////////////////////////////////////////

package main

import (
	"fmt"
	"os"
	"strconv"
	"time"
)

// worker читает данные из канала и выводит в stdout
func worker(id int, jobs <-chan int) {
	for job := range jobs {
		fmt.Printf("Worker %d взял задачу: %d\n", id, job)

		// имитация задержки на обработку
		time.Sleep(500 * time.Millisecond)
	}
}

func main() {

	if len(os.Args) < 2 {
		fmt.Println("Использование: go run main.go <количество_воркеров>")
		return
	}

	// Количество воркеров - из аргумента командной строки
	n, err := strconv.Atoi(os.Args[1])
	if err != nil || n <= 0 {
		fmt.Println("Ошибка: количество воркеров д.б. положительным числом")
		return
	}

	jobs := make(chan int)

	// Запуск N воркеров в отдельных горутинах
	for i := 1; i <= n; i++ {
		go worker(i, jobs)
	}

	// Шлем данные в канал(беск.цикл)
	taskID := 1
	for {
		jobs <- taskID
		taskID++
		time.Sleep(200 * time.Millisecond) // чтоб не спамить слишком быстро
	}
}
